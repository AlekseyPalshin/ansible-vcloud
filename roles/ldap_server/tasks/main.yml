---
- name: upgrade all packages
  apt: update_cache=yes

- name: install required packages
  apt: pkg={{ item }} state=latest
  with_items: 
  - slapd 
  - ldap-utils

- name: copy client ldap config
  template: src=ldap.conf dest=/etc/ldap/ldap.conf

- name: check if we need to do initial configuration
  stat: path=/etc/ldap/initialized
  register: init

- set_fact: initialized={{ init.stat.exists }}

- debug: var=initialized

- name: set debconf variables
  debconf: >
    name=slapd
    question="{{ item.key }}"
    vtype="{{ item.type }}"
    value="{{ item.value }}"
  with_items:
  - { key: "slapd/internal/generated_adminpw", type: "password", value: "{{ ldap_password }}" }
  - { key: "slapd/internal/adminpw", type: "password",  value: "{{ ldap_password }}" }
  - { key: "slapd/password2", type: "password", value: "{{ ldap_password }}" }
  - { key: "slapd/password1", type: "password", value: "{{ ldap_password }}" }
  - { key: "slapd/allow_ldap_v2", type: "boolean", value: false }
  - { key: "slapd/password_mismatch", type: "note", value: "" }
  - { key: "slapd/invalid_config", type: "boolean", value: true }
  - { key: "shared/organization", type: "string", value: "{{ ldap_domain }}" }
  - { key: "slapd/upgrade_slapcat_failure", type: "error", value: "" }
  - { key: "slapd/no_configuration", type: "boolean", value: false }
  - { key: "slapd/move_old_database", type: "boolean", value:  true }
  - { key: "slapd/dump_database_destdir", type: "string", value: "/var/backups/slapd-VERSION" }
  - { key: "slapd/purge_database", type: "boolean", value: true }
  - { key: "slapd/domain", type: "string", value: "{{ ldap_domain }}" }
  - { key: "slapd/backend", type: "select", value: HDB }
  - { key: "slapd/organization", type: "string", value: "{{ ldap_domain }}" }
  - { key: "slapd/dump_database", type: "select", value: "when needed" }
  register: slapd_debconf
  when: not initialized

- name: reconfigure slapd
  command: dpkg-reconfigure -f noninteractive slapd
  when: not initialized

- name: set initialization finished
  file: path=/etc/ldap/initialized state=touched
  when: not initialized

- name: restart ldap service
  service: name=slapd state=restarted enabled=true
  when: not initialized 

- name: generate root password 
  shell: slappasswd  -s {{ ldap_password }}
  register: slappasswd_cmd

- set_fact: encrypted_password="{{ slappasswd_cmd.stdout_lines[0] }}"

- name: copy configroot.ldif
  template: src=configroot.ldif dest=/tmp/configroot.ldif

- name: import configroot.ldif
  shell: ldapmodify -ac -Y EXTERNAL -H ldapi:/// -f /tmp/configroot.ldif
  ignore_errors: yes

- name: copy base.ldif
  template: src=base.ldif dest=/tmp/base.ldif

- name: import base.ldif
  shell: ldapmodify -ac -Y EXTERNAL -H ldapi:///  -f /tmp/base.ldif
  ignore_errors: yes

#- name: copy dbindices.ldif
#  template: src=dbindices.ldif dest=/tmp/dbindices.ldif

#- name: import dbindices.ldif
#  shell: ldapmodify -ac -Y EXTERNAL -H ldapi:/// -f /tmp/dbindices.ldif
#  ignore_errors: yes

#- name: copy logging.ldif
#  template: src=logging.ldif dest=/tmp/logging.ldif

#- name: import logging.ldif
#  shell: sudo ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f logging.ldif

- name: restart slapd
  service: name=slapd state=restarted enabled=true

- name: download migration tools
  get_url: url=http://www.padl.com/download/MigrationTools.tgz dest=/tmp
  register: migration_tools_tar

- debug: var=migration_tools_tar

- name: untar migration tools
  shell: tar xzf {{ migration_tools_tar.dest }}
