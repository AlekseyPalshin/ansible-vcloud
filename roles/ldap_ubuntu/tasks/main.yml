---
- name: upgrade all packages
  apt: update_cache=yes

- name: install required packages
  apt: pkg={{ item }} state=latest
  with_items: 
  - slapd 
  - ldap-utils

- name: copy ldap config
  template: src=ldap.conf dest=/etc/ldap/ldap.conf

- name: check if we need to do initial configuration
  stat: path=/etc/ldap/initialized
  register: init

- set_fact: not_yet_initialized={{ not init.stat.exists }}

- debug: var=not_yet_initialized

- name: copy debconf-selections
  template: src=debconf-selections dest=/tmp/debconf-selections
  when: not_yet_initialized  

- name: set debconf selections
  shell: debconf-set-selections -v /tmp/debconf-selections
  when: not_yet_initialized

- name: reconfigure slapd
  command: dpkg-reconfigure -f noninteractive slapd
  when: not_yet_initialized
  register: dpkg_reconfigure

- name: remove debconf-selections file
  file: path=/tmp/debconf-selections state=absent

- name: set initialization finished
  shell: touch /etc/ldap/initialized
  args:
    creates: /etc/ldap/initialized

- name: restart ldap service
  service: name=slapd state=restarted enabled=true 

- name: look for People and Group 
  shell: ldapsearch -x -b "ou=Group,dc={{ ldap_base }}" | grep '^result:.*No\ssuch\sobject'
  register: group_search

- set_fact: group_not_exist={{ group_search.stdout_lines | length > 0}}

- name: copy init-ldap.ldif
  template: src=ldap-init.ldif dest=/tmp/ldap-init.ldif
  when: group_not_exist

- name: import initial ldif
  shell: ldapadd -x -D "cn=admin,{{ ldap_base }}" -w {{ ldap_password }} -f /tmp/ldap-init.ldif
  when: group_not_exist
