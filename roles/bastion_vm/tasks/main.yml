---
- name: upgrade all packages
  yum: name=* state=latest
  sudo: true

- name: install SELinux-Python
  yum: name=libselinux-python state=present

- name: Create sudoers file backup
  command: cp -f /etc/sudoers /etc/sudoers.bak

- name: Create admins group
  group: name=admin system=yes state=present

- name: Make sure admin group can sudo
  lineinfile: 
    dest: /etc/sudoers 
    state: present 
    regexp: "^%admin ALL.?.?ALL.? NOPASSWD.? ALL" 
    line: "%admin ALL=(ALL) NOPASSWD: ALL"

- name: Make sure ssh-agent works via sudo
  lineinfile: dest=/etc/sudoers state=present regexp="^Defaults env_keep\+\=SSH_AUTH_SOCK" line="Defaults env_keep+=SSH_AUTH_SOCK"

- name: Create user ansible
  user: name=ansible comment="Ansible User" group=admin home=/home/ansible state=present

- name: Check if key-pair exists 
  local_action: command ls {{ playbook_dir }}/generated/id_rsa_bastion
  register: result
  ignore_errors: true

- debug: var=result

- name: Create a directory to store key-pair
  local_action: command mkdir {{ playbook_dir }}/generated
  when: result.stderr != ""

- name: Generate SSH keys
  local_action: command ssh-keygen -t rsa  -f {{ playbook_dir }}/generated/id_rsa_bastion -P ""
  when: result.stderr != ""

- name: Authorized key upload
  authorized_key: 
    user: ansible 
    key: "{{ lookup('file', 'id_rsa.pub') }}"
    path: "/home/ansible/.ssh/authorized_keys"
    manage_dir: no
  sudo: true

- name: ssh-add the private key locally
  local_action: command ssh-add {{ playbook_dir }}/generated/id_rsa_bastion